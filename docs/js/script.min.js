'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

document.addEventListener('DOMContentLoaded', function () {
  function addZero(num) {
    if (num >= 0 && num < 10) {
      return "0".concat(num);
    } else {
      return num;
    }
  } //Tabs


  var tabs = document.querySelectorAll('.tabheader__item'),
      tabsContent = document.querySelectorAll('.tabcontent'),
      tabsParent = document.querySelector('.tabheader__items');

  function hideTabcontent() {
    tabsContent.forEach(function (item) {
      item.classList.add('hide');
      item.classList.remove('show', 'fade');
    });
    tabs.forEach(function (tab) {
      tab.classList.remove('tabheader__item_active');
    });
  }

  function showTabContent() {
    var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    tabsContent[i].classList.add('show', 'fade');
    tabsContent[i].classList.remove('hide');
    tabs[i].classList.add('tabheader__item_active');
  }

  hideTabcontent();
  showTabContent();
  tabsParent.addEventListener('click', function (e) {
    var target = e.target;

    if (target && target.classList.contains('tabheader__item')) {
      tabs.forEach(function (item, i) {
        if (target == item) {
          hideTabcontent();
          showTabContent(i);
        }
      });
    }
  }); //Timer

  var deadline = '2021-05-01';

  function getTimeRemaining(endtime) {
    var t = new Date(endtime) - Date.now(),
        days = Math.floor(t / (1000 * 60 * 60 * 24)),
        hours = Math.floor(t / (1000 * 60 * 60) % 24),
        minutes = Math.floor(t / 1000 / 60 % 60),
        seconds = Math.floor(t / 1000 % 60);
    return {
      'total': t,
      'days': days,
      'hours': hours,
      'minutes': minutes,
      'seconds': seconds
    };
  }

  function setClock(selector, endtime) {
    var timer = document.querySelector(selector),
        days = timer.querySelector('#days'),
        hours = timer.querySelector('#hours'),
        minutes = timer.querySelector('#minutes'),
        seconds = timer.querySelector('#seconds'),
        timeInterval = setInterval(updateClock, 1000);
    updateClock();

    function updateClock() {
      var t = getTimeRemaining(endtime);
      days.innerHTML = addZero(t.days);
      hours.innerHTML = addZero(t.hours);
      minutes.innerHTML = addZero(t.minutes);
      seconds.innerHTML = addZero(t.seconds);

      if (t.total <= 0) {
        clearInterval(timeInterval);
      }
    }
  }

  setClock('.timer', deadline); // Modal

  var modalTrigger = document.querySelectorAll('[data-modal]'),
      modal = document.querySelector('.modal');

  function openModal() {
    modal.classList.remove('hide');
    modal.classList.add('show');
    document.body.style.overflow = 'hidden'; // clearInterval(modalTimerId);
  }

  modalTrigger.forEach(function (btn) {
    btn.addEventListener('click', openModal);
  });

  function closeModal() {
    modal.classList.remove('show');
    modal.classList.add('hide');
    document.body.style.overflow = '';
  }

  modal.addEventListener('click', function (e) {
    if (e.target === modal || e.target.getAttribute('data-close') == '') {
      closeModal();
    }
  });
  document.addEventListener('keydown', function (e) {
    if (e.code === 'Escape' && modal.classList.contains('show')) {
      closeModal();
    }
  });
  var modalTimerId = setTimeout(openModal, 70000);

  function showModalByScroll() {
    if (window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight) {
      openModal();
      window.removeEventListener('scroll', showModalByScroll);
    }
  }

  window.addEventListener('scroll', showModalByScroll); // Класс

  var MenuCard = /*#__PURE__*/function () {
    function MenuCard(src, alt, title, descr, price, parentSelector) {
      _classCallCheck(this, MenuCard);

      this.src = src;
      this.alt = alt;
      this.title = title;
      this.descr = descr;
      this.price = price;

      for (var _len = arguments.length, classes = new Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {
        classes[_key - 6] = arguments[_key];
      }

      this.classes = classes;
      this.parent = document.querySelector(parentSelector);
      this.changeToRub();
    }

    _createClass(MenuCard, [{
      key: "changeToRub",
      value: function changeToRub() {
        this.price = this.price.toLocaleString('ru', {
          maximumFractionDigits: 0,
          style: 'currency',
          currency: 'RUB'
        });
      }
    }, {
      key: "renderCard",
      value: function renderCard() {
        var element = document.createElement('div');

        if (this.classes.length === 0) {
          this.element = 'menu__item';
          element.classList.add(this.element);
        } else {
          this.classes.forEach(function (className) {
            element.classList.add(className);
          });
        }

        element.innerHTML = "\n               <img src=\"".concat(this.src, "\" alt=").concat(this.alt, ">\n               <h3 class=\"menu__item-subtitle\">").concat(this.title, "</h3>\n               <div class=\"menu__item-descr\">").concat(this.descr, "</div>\n               <div class=\"menu__item-divider\"></div>\n               <div class=\"menu__item-price\">\n                   <div class=\"menu__item-cost\">\u0426\u0435\u043D\u0430:</div>\n                   <div class=\"menu__item-total\"><span>").concat(this.price, "</span></div>\n               </div>\n               ");
        this.parent.append(element);
      }
    }]);

    return MenuCard;
  }();

  var getResources = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(url) {
      var result;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return fetch(url);

            case 2:
              result = _context.sent;

              if (result.ok) {
                _context.next = 5;
                break;
              }

              throw new Error("Couldt fetch ".concat(url, ", status: ").concat(result.status));

            case 5:
              _context.next = 7;
              return result.json();

            case 7:
              return _context.abrupt("return", _context.sent);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function getResources(_x) {
      return _ref.apply(this, arguments);
    };
  }(); // getResources('http://localhost:3000/menu')
  //    .then(data => {
  // data.forEach(({img, altimg, title, descr, price}) => {
  //    new MenuCard(img, altimg, title, descr, price, '.menu .container').renderCard();
  // });
  //    });


  axios.get('http://localhost:3000/menu').then(function (data) {
    data.data.forEach(function (_ref2) {
      var img = _ref2.img,
          altimg = _ref2.altimg,
          title = _ref2.title,
          descr = _ref2.descr,
          price = _ref2.price;
      new MenuCard(img, altimg, title, descr, price, '.menu .container').renderCard();
    });
  }); // getResources('http://localhost:3000/menu')
  //    .then(data => createCard(data));
  //    function createCard(data) {
  //       data.forEach(({img, altimg, title, descr, price}) => {
  //          price = price.toLocaleString('ru', { maximumFractionDigits: 0, style: 'currency', currency: 'RUB' });
  //          const element = document.createElement('div');
  //          element.classList.add('menu__item');
  //          element.innerHTML = `
  //          <img src="${img}" alt=${altimg}>
  //          <h3 class="menu__item-subtitle">${title}</h3>
  //          <div class="menu__item-descr">${descr}</div>
  //          <div class="menu__item-divider"></div>
  //          <div class="menu__item-price">
  //              <div class="menu__item-cost">Цена:</div>
  //              <div class="menu__item-total"><span>${price}</span></div>
  //          </div>
  //          `;
  //          document.querySelector('.menu .container').append(element);
  //       });
  //    }
  //forms 

  var forms = document.querySelectorAll('form');
  var message = {
    loading: './img/spinner.svg',
    success: 'Спасибо! Скоро мы с вами свяжемся',
    failure: 'Что-то пошло не так'
  };
  forms.forEach(function (item) {
    bindPostData(item);
  });

  var postData = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(url, data) {
      var result;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return fetch(url, {
                method: 'POST',
                headers: {
                  'Content-type': 'application/json'
                },
                body: data
              });

            case 2:
              result = _context2.sent;
              _context2.next = 5;
              return result.json();

            case 5:
              return _context2.abrupt("return", _context2.sent);

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function postData(_x2, _x3) {
      return _ref3.apply(this, arguments);
    };
  }();

  function bindPostData(form) {
    form.addEventListener('submit', function (e) {
      e.preventDefault();
      var statusMessage = document.createElement('img');
      statusMessage.src = message.loading;
      statusMessage.style.cssText = "\n               display: block;\n               width: 50px;\n               height: 50px;\n               margin: 0 auto;\n            ";
      form.insertAdjacentElement('afterend', statusMessage);
      var formData = new FormData(form);
      var json = JSON.stringify(Object.fromEntries(formData.entries()));
      postData('http://localhost:3000/requests', json).then(function (data) {
        console.log(data);
        showThanksModal(message.success);
        statusMessage.remove();
      })["catch"](function () {
        showThanksModal(message.failure);
      })["finally"](function () {
        form.reset();
      });
    });
  }

  function showThanksModal(message) {
    var prevModalDialog = document.querySelector('.modal__dialog');
    prevModalDialog.classList.add('hide');
    openModal();
    var thanksModal = document.createElement('div');
    thanksModal.classList.add('modal__dialog');
    thanksModal.innerHTML = "\n            <div class=\"modal__content\">\n               <div class=\"modal__close\" data-close>&times;</div>\n               <div class=\"modal__title\">".concat(message, "</div>\n            </div>\n         ");
    document.querySelector('.modal').append(thanksModal);
    setTimeout(function () {
      thanksModal.remove();
      prevModalDialog.classList.remove('hide');
      prevModalDialog.classList.add('show');
      closeModal();
    }, 4000);
  } //Слайдер


  function sliderSimple() {
    var slider = document.querySelector('.offer__slider'),
        prev = slider.querySelector('.offer__slider-prev'),
        next = slider.querySelector('.offer__slider-next'),
        current = slider.querySelector('#current'),
        total = slider.querySelector('#total'),
        slides = slider.querySelectorAll('.offer__slide');
    var slideIndex = 1;
    total.textContent = addZero(slides.length);
    switchSlide(slideIndex - 1);

    function showSlides(n) {
      if (n > slides.length) {
        slideIndex = 1;
      }

      if (n < 1) {
        slideIndex = slides.length;
      }

      current.textContent = addZero(slideIndex);
      slides.forEach(function (slide) {
        return slide.classList.add('hide');
      });
      slides[slideIndex - 1].classList.remove('hide');
    }

    function switchSlide(n) {
      showSlides(slideIndex += n);
    }

    prev.addEventListener('click', function () {
      switchSlide(-1);
    });
    next.addEventListener('click', function () {
      switchSlide(1);
    });
  }

  function sliderCarousel() {
    var slider = document.querySelector('.offer__slider'),
        prev = slider.querySelector('.offer__slider-prev'),
        next = slider.querySelector('.offer__slider-next'),
        current = slider.querySelector('#current'),
        total = slider.querySelector('#total'),
        slides = slider.querySelectorAll('.offer__slide'),
        slidesWrapper = slider.querySelector('.offer__slider-wrapper'),
        slidesField = slider.querySelector('.offer__slider-inner'),
        width = window.getComputedStyle(slidesWrapper).width;
    var slideIndex = 1,
        offset = 0;
    total.textContent = addZero(slides.length);
    current.textContent = addZero(slideIndex);
    slidesField.style.width = 100 * slides.length + '%';
    slides.forEach(function (slide) {
      slide.style.width = width;
    });
    var indicators = document.createElement('ol'),
        dots = [];
    indicators.classList.add('carousel-indicators');
    slider.append(indicators);

    for (var i = 0; i < slides.length; i++) {
      var dot = document.createElement('li');
      dot.setAttribute('data-slide-to', i + 1);
      dot.classList.add('dot');

      if (i == 0) {
        dot.classList.add('vis');
      }

      indicators.append(dot);
      dots.push(dot);
    }

    var flameDot = function flameDot(els, i) {
      els.forEach(function (el) {
        return el.classList.add('glass');
      });
      els.forEach(function (el) {
        return el.classList.remove('vis');
      });
      els[i - 1].classList.add('vis');
      els[i - 1].classList.remove('glass');
    };

    function val2num() {
      return +this.replace(/\D/g, '');
    }

    String.prototype.val2num = val2num;
    next.addEventListener('click', function () {
      if (offset == width.val2num() * (slides.length - 1)) {
        offset = 0;
      } else {
        offset += width.val2num();
      }

      slidesField.style.transform = "translateX(-".concat(offset, "px)");

      if (slideIndex == slides.length) {
        slideIndex = 1;
      } else {
        slideIndex++;
      }

      current.textContent = addZero(slideIndex);
      flameDot(dots, slideIndex);
    });
    prev.addEventListener('click', function () {
      if (offset == 0) {
        offset = width.val2num() * (slides.length - 1);
      } else {
        offset -= width.val2num();
      }

      slidesField.style.transform = "translateX(-".concat(offset, "px)");

      if (slideIndex == 1) {
        slideIndex = slides.length;
      } else {
        slideIndex--;
      }

      current.textContent = addZero(slideIndex);
      flameDot(dots, slideIndex);
    });
    dots.forEach(function (dot) {
      dot.addEventListener('click', function (e) {
        var slideTo = e.target.getAttribute('data-slide-to');
        slideIndex = slideTo;
        offset = width.val2num() * (slideTo - 1);
        slidesField.style.transform = "translateX(-".concat(offset, "px)");
        current.textContent = addZero(slideIndex);
        flameDot(dots, slideIndex);
      });
    });
  }

  sliderCarousel(); // sliderSimple();
  //Calc

  function calc() {
    var res = document.querySelector('.calculating__result span');
    var sex = 'female',
        height,
        weight,
        age,
        ratio = 1.375;

    function calcTotal() {
      if (!sex || !height || !weight || !age || !ratio) {
        res.textContent = 'Заполните все поля';
        return;
      }

      if (sex === 'female') {
        res.textContent = Math.round((447.6 + 9.2 * weight + 3.1 * height - 4.3 * age) * ratio);
      } else {
        res.textContent = Math.round((88.36 + 13.4 * weight + 4.8 * height - 5.7 * age) * ratio);
      }
    }

    calcTotal();

    function getStatInfo(parent, active) {
      var elements = document.querySelectorAll("".concat(parent, " div"));
      elements.forEach(function (el) {
        el.addEventListener('click', function (e) {
          if (e.target.getAttribute('data-ratio')) {
            ratio = +e.target.getAttribute('data-ratio');
          } else {
            sex = e.target.getAttribute('id');
          }

          elements.forEach(function (elem) {
            elem.classList.remove(active);
          });
          e.target.classList.add(active);
          calcTotal();
        });
      });
    }

    getStatInfo('#gender', 'calculating__choose-item_active');
    getStatInfo('.calculating__choose_big', 'calculating__choose-item_active');

    function getDinInfo(selector) {
      var input = document.querySelector(selector);
      input.addEventListener('input', function () {
        switch (input.getAttribute('id')) {
          case 'height':
            height = +input.value;
            break;

          case 'weight':
            weight = +input.value;
            break;

          case 'age':
            age = +input.value;
            break;
        }

        calcTotal();
      });
    }

    getDinInfo('#height');
    getDinInfo('#weight');
    getDinInfo('#age');
  }

  calc();
});