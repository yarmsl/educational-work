'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

document.addEventListener('DOMContentLoaded', function () {
  //Tabs
  var tabs = document.querySelectorAll('.tabheader__item'),
      tabsContent = document.querySelectorAll('.tabcontent'),
      tabsParent = document.querySelector('.tabheader__items');

  function hideTabcontent() {
    tabsContent.forEach(function (item) {
      item.classList.add('hide');
      item.classList.remove('show', 'fade');
    });
    tabs.forEach(function (tab) {
      tab.classList.remove('tabheader__item_active');
    });
  }

  function showTabContent() {
    var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    tabsContent[i].classList.add('show', 'fade');
    tabsContent[i].classList.remove('hide');
    tabs[i].classList.add('tabheader__item_active');
  }

  hideTabcontent();
  showTabContent();
  tabsParent.addEventListener('click', function (e) {
    var target = e.target;

    if (target && target.classList.contains('tabheader__item')) {
      tabs.forEach(function (item, i) {
        if (target == item) {
          hideTabcontent();
          showTabContent(i);
        }
      });
    }
  }); //Timer

  var deadline = '2021-05-01';

  function getTimeRemaining(endtime) {
    var t = new Date(endtime) - Date.now(),
        days = Math.floor(t / (1000 * 60 * 60 * 24)),
        hours = Math.floor(t / (1000 * 60 * 60) % 24),
        minutes = Math.floor(t / 1000 / 60 % 60),
        seconds = Math.floor(t / 1000 % 60);
    return {
      'total': t,
      'days': days,
      'hours': hours,
      'minutes': minutes,
      'seconds': seconds
    };
  }

  function addZero(num) {
    if (num >= 0 && num < 10) {
      return "0".concat(num);
    } else {
      return num;
    }
  }

  function setClock(selector, endtime) {
    var timer = document.querySelector(selector),
        days = timer.querySelector('#days'),
        hours = timer.querySelector('#hours'),
        minutes = timer.querySelector('#minutes'),
        seconds = timer.querySelector('#seconds'),
        timeInterval = setInterval(updateClock, 1000);
    updateClock();

    function updateClock() {
      var t = getTimeRemaining(endtime);
      days.innerHTML = addZero(t.days);
      hours.innerHTML = addZero(t.hours);
      minutes.innerHTML = addZero(t.minutes);
      seconds.innerHTML = addZero(t.seconds);

      if (t.total <= 0) {
        clearInterval(timeInterval);
      }
    }
  }

  setClock('.timer', deadline); // Modal

  var modalTrigger = document.querySelectorAll('[data-modal]'),
      modal = document.querySelector('.modal');

  function openModal() {
    modal.classList.remove('hide');
    modal.classList.add('show');
    document.body.style.overflow = 'hidden'; // clearInterval(modalTimerId);
  }

  modalTrigger.forEach(function (btn) {
    btn.addEventListener('click', openModal);
  });

  function closeModal() {
    modal.classList.remove('show');
    modal.classList.add('hide');
    document.body.style.overflow = '';
  }

  modal.addEventListener('click', function (e) {
    if (e.target === modal || e.target.getAttribute('data-close') == '') {
      closeModal();
    }
  });
  document.addEventListener('keydown', function (e) {
    if (e.code === 'Escape' && modal.classList.contains('show')) {
      closeModal();
    }
  });
  var modalTimerId = setTimeout(openModal, 70000);

  function showModalByScroll() {
    if (window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight) {
      openModal();
      window.removeEventListener('scroll', showModalByScroll);
    }
  }

  window.addEventListener('scroll', showModalByScroll); // Класс

  var MenuCard = /*#__PURE__*/function () {
    function MenuCard(src, alt, title, descr, price, parentSelector) {
      _classCallCheck(this, MenuCard);

      this.src = src;
      this.alt = alt;
      this.title = title;
      this.descr = descr;
      this.price = price;

      for (var _len = arguments.length, classes = new Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {
        classes[_key - 6] = arguments[_key];
      }

      this.classes = classes;
      this.parent = document.querySelector(parentSelector);
      this.changeToRub();
    }

    _createClass(MenuCard, [{
      key: "changeToRub",
      value: function changeToRub() {
        this.price = this.price.toLocaleString('ru', {
          maximumFractionDigits: 0,
          style: 'currency',
          currency: 'RUB'
        });
      }
    }, {
      key: "renderCard",
      value: function renderCard() {
        var element = document.createElement('div');

        if (this.classes.length === 0) {
          this.element = 'menu__item';
          element.classList.add(this.element);
        } else {
          this.classes.forEach(function (className) {
            element.classList.add(className);
          });
        }

        element.innerHTML = "\n               <img src=\"img/tabs/".concat(this.src, "\" alt=\"post\">\n               <h3 class=\"menu__item-subtitle\">").concat(this.title, "</h3>\n               <div class=\"menu__item-descr\">").concat(this.descr, "</div>\n               <div class=\"menu__item-divider\"></div>\n               <div class=\"menu__item-price\">\n                   <div class=\"menu__item-cost\">\u0426\u0435\u043D\u0430:</div>\n                   <div class=\"menu__item-total\"><span>").concat(this.price, "</span></div>\n               </div>\n               ");
        this.parent.append(element);
      }
    }]);

    return MenuCard;
  }();

  new MenuCard('hamburger.webp', 'бургер', 'Меню жирный', 'Мясистый нежный гамбургер с картошечкой для жены', 380, '.menu .container').renderCard();
  new MenuCard('hamburger.webp', 'бургер', 'Меню жирный', 'Мясистый нежный гамбургер с картошечкой для жены', 380, '.menu .container', 'menu__item').renderCard();
  new MenuCard('hamburger.webp', 'бургер', 'Меню жирный', 'Мясистый нежный гамбургер с картошечкой для жены', 380, '.menu .container', 'menu__item').renderCard(); //forms 

  var forms = document.querySelectorAll('form');
  var message = {
    loading: './img/spinner.svg',
    success: 'Спасибо! Скоро мы с вами свяжемся',
    failure: 'Что-то пошло не так'
  };
  forms.forEach(function (item) {
    postData(item);
  });

  function postData(form) {
    form.addEventListener('submit', function (e) {
      e.preventDefault();
      var statusMessage = document.createElement('img');
      statusMessage.src = message.loading;
      statusMessage.style.cssText = "\n               display: block;\n               width: 50px;\n               height: 50px;\n               margin: 0 auto;\n            ";
      form.insertAdjacentElement('afterend', statusMessage);
      var formData = new FormData(form);
      var data = {};
      formData.forEach(function (value, key) {
        data[key] = value;
      });
      var json = JSON.stringify(data);
      fetch('./server.php', {
        method: 'POST',
        headers: {
          'Content-type': 'application/json'
        },
        body: json
      }).then(function (data) {
        return data.text();
      }).then(function (data) {
        console.log(data);
        showThanksModal(message.success);
        statusMessage.remove();
      })["catch"](function () {
        showThanksModal(message.failure);
      })["finally"](function () {
        form.reset();
      });
    });
  }

  function showThanksModal(message) {
    var prevModalDialog = document.querySelector('.modal__dialog');
    prevModalDialog.classList.add('hide');
    openModal();
    var thanksModal = document.createElement('div');
    thanksModal.classList.add('modal__dialog');
    thanksModal.innerHTML = "\n            <div class=\"modal__content\">\n               <div class=\"modal__close\" data-close>&times;</div>\n               <div class=\"modal__title\">".concat(message, "</div>\n            </div>\n         ");
    document.querySelector('.modal').append(thanksModal);
    setTimeout(function () {
      thanksModal.remove();
      prevModalDialog.classList.remove('hide');
      prevModalDialog.classList.add('show');
      closeModal();
    }, 4000);
  }
});