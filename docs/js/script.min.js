'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

document.addEventListener('DOMContentLoaded', function () {
  //Tabs
  var tabs = document.querySelectorAll('.tabheader__item'),
      tabsContent = document.querySelectorAll('.tabcontent'),
      tabsParent = document.querySelector('.tabheader__items');

  function hideTabcontent() {
    tabsContent.forEach(function (item) {
      item.classList.add('hide');
      item.classList.remove('show', 'fade');
    });
    tabs.forEach(function (tab) {
      tab.classList.remove('tabheader__item_active');
    });
  }

  function showTabContent() {
    var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    tabsContent[i].classList.add('show', 'fade');
    tabsContent[i].classList.remove('hide');
    tabs[i].classList.add('tabheader__item_active');
  }

  hideTabcontent();
  showTabContent();
  tabsParent.addEventListener('click', function (e) {
    var target = e.target;

    if (target && target.classList.contains('tabheader__item')) {
      tabs.forEach(function (item, i) {
        if (target == item) {
          hideTabcontent();
          showTabContent(i);
        }
      });
    }
  }); //Timer

  var deadline = '2021-05-01';

  function getTimeRemaining(endtime) {
    var t = new Date(endtime) - Date.now(),
        days = Math.floor(t / (1000 * 60 * 60 * 24)),
        hours = Math.floor(t / (1000 * 60 * 60) % 24),
        minutes = Math.floor(t / 1000 / 60 % 60),
        seconds = Math.floor(t / 1000 % 60);
    return {
      'total': t,
      'days': days,
      'hours': hours,
      'minutes': minutes,
      'seconds': seconds
    };
  }

  function addZero(num) {
    if (num >= 0 && num < 10) {
      return "0".concat(num);
    } else {
      return num;
    }
  }

  function setClock(selector, endtime) {
    var timer = document.querySelector(selector),
        days = timer.querySelector('#days'),
        hours = timer.querySelector('#hours'),
        minutes = timer.querySelector('#minutes'),
        seconds = timer.querySelector('#seconds'),
        timeInterval = setInterval(updateClock, 1000);
    updateClock();

    function updateClock() {
      var t = getTimeRemaining(endtime);
      days.innerHTML = addZero(t.days);
      hours.innerHTML = addZero(t.hours);
      minutes.innerHTML = addZero(t.minutes);
      seconds.innerHTML = addZero(t.seconds);

      if (t.total <= 0) {
        clearInterval(timeInterval);
      }
    }
  }

  setClock('.timer', deadline); // Modal

  var modalTrigger = document.querySelectorAll('[data-modal]'),
      modalClose = document.querySelector('[data-close]'),
      modal = document.querySelector('.modal');

  function openModal() {
    modal.classList.remove('hide');
    modal.classList.add('show');
    document.body.style.overflow = 'hidden'; // clearInterval(modalTimerId);
  }

  modalTrigger.forEach(function (btn) {
    btn.addEventListener('click', openModal);
  });

  function closeModal() {
    modal.classList.remove('show');
    modal.classList.add('hide');
    document.body.style.overflow = '';
  }

  modalClose.addEventListener('click', closeModal);
  modal.addEventListener('click', function (e) {
    if (e.target === modal) {
      closeModal();
    }
  });
  document.addEventListener('keydown', function (e) {
    if (e.code === 'Escape' && modal.classList.contains('show')) {
      closeModal();
    }
  }); // const modalTimerId = setTimeout(openModal, 7000);

  function showModalByScroll() {
    if (window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight) {
      openModal();
      window.removeEventListener('scroll', showModalByScroll);
    }
  }

  window.addEventListener('scroll', showModalByScroll); // Класс

  var MenuCard = /*#__PURE__*/function () {
    function MenuCard(src, alt, title, descr, price, parentSelector) {
      _classCallCheck(this, MenuCard);

      this.src = src;
      this.alt = alt;
      this.title = title;
      this.descr = descr;
      this.price = price;
      this.parent = document.querySelector(parentSelector);
      this.changeToRub();
    }

    _createClass(MenuCard, [{
      key: "changeToRub",
      value: function changeToRub() {
        this.price = this.price.toLocaleString('ru', {
          maximumFractionDigits: 0,
          style: 'currency',
          currency: 'RUB'
        });
      }
    }, {
      key: "renderCard",
      value: function renderCard() {
        var element = document.createElement('div');
        element.innerHTML = "\n            <div class=\"menu__item\">\n               <img src=\"img/tabs/".concat(this.src, "\" alt=\"post\">\n               <h3 class=\"menu__item-subtitle\">").concat(this.title, "</h3>\n               <div class=\"menu__item-descr\">").concat(this.descr, "</div>\n               <div class=\"menu__item-divider\"></div>\n               <div class=\"menu__item-price\">\n                   <div class=\"menu__item-cost\">\u0426\u0435\u043D\u0430:</div>\n                   <div class=\"menu__item-total\"><span>").concat(this.price, "</span></div>\n               </div>\n            </div>\n               ");
        this.parent.append(element);
      }
    }]);

    return MenuCard;
  }();

  new MenuCard('hamburger.webp', 'бургер', 'Меню жирный', 'Мясистый нежный гамбургер с картошечкой для жены', 380, '.menu .container').renderCard();
  new MenuCard('hamburger.webp', 'бургер', 'Меню жирный', 'Мясистый нежный гамбургер с картошечкой для жены', 380, '.menu .container').renderCard();
  new MenuCard('hamburger.webp', 'бургер', 'Меню жирный', 'Мясистый нежный гамбургер с картошечкой для жены', 380, '.menu .container').renderCard();
});